VERSION 0.6
FROM bash:4.4
WORKDIR /setup-arena

# Create args for PHP extensions and PECL packages we need to install.
# This makes it easier if we want to install packages,
# as we have to install them in multiple places.
# This helps keep ou Dockerfiles DRY -> https://bit.ly/dry-code
# You can see a list of required extensions for Laravel here: https://laravel.com/docs/8.x/deployment#server-requirements
ARG PHP_EXTS="bcmath ctype fileinfo mbstring pdo pdo_mysql dom pcntl "
ARG PHP_PECL_EXTS="redis"

composer-base:
	# We need to build the Composer base to reuse packages we've installed
	FROM composer:2.1

	# First, create the application directory, and some auxilary directories for scripts and such
	RUN mkdir -p /opt/apps/laravel-in-kubernetes /opt/apps/laravel-in-kubernetes/bin

	# Next, set our working directory
	WORKDIR /opt/apps/laravel-in-kubernetes

	# We need to create a composer group and user, and create a home directory for it, so we keep the rest of our image safe,
	# And not accidentally run malicious scripts
	RUN addgroup -S composer \
		&& adduser -S composer -G composer \
		&& chown -R composer /opt/apps/laravel-in-kubernetes \
		&& apk add --virtual build-dependencies --no-cache ${PHPIZE_DEPS} openssl ca-certificates libxml2-dev oniguruma-dev \
		&& docker-php-ext-install -j$(nproc) ${PHP_EXTS} \
		&& pecl install ${PHP_PECL_EXTS} \
		&& docker-php-ext-enable ${PHP_PECL_EXTS} \
		&& apk del build-dependencies

	# #  Install Imagick for PDF to Image coversion
	RUN wget https://raw.githubusercontent.com/mlocati/docker-php-extension-installer/master/install-php-extensions
	RUN mv install-php-extensions /usr/local/bin/
	RUN chmod uga+x /usr/local/bin/install-php-extensions && sync && \
    install-php-extensions imagick
	

	# Install ghostscript
	RUN wget https://github.com/luvvien/resources/raw/master/ghostscript-9.22-linux-x86_64.tar.gz\
    && tar -xzvf ghostscript-9.22-linux-x86_64.tar.gz \
    && cd ghostscript-9.22-linux-x86_64 \
    && cp gs-922-linux-x86_64 /usr/local/bin/gs \
    && cp gs-922-linux-x86_64 /usr/bin/gs \
    && rm ../ghostscript-9.22-linux-x86_64.tar.gz \
    && rm -rf ghostscript-9.22-linux-x86_64 

	# Setup GD extension
	RUN apk add --no-cache \
		freetype \
		libjpeg-turbo \
		libpng \
		freetype-dev \
		libjpeg-turbo-dev \
		libpng-dev \
		&& docker-php-ext-configure gd \
		--with-freetype=/usr/include/ \
		# --with-png=/usr/include/ \ # No longer necessary as of 7.4; https://github.com/docker-library/php/pull/910#issuecomment-559383597
		--with-jpeg=/usr/include/ \
		&& docker-php-ext-install -j$(nproc) gd \
		&& docker-php-ext-enable gd \
		&& apk del --no-cache \
		freetype-dev \
		libjpeg-turbo-dev \
		libpng-dev \
		&& rm -rf /tmp/*

	# Setup ffmpeg
	RUN apk add  --no-cache ffmpeg


	# Next we want to switch over to the composer user before running installs.
	# This is very important, so any extra scripts that composer wants to run,
	# don't have access to the root filesystem.
	# This especially important when installing packages from unverified sources.
	USER composer

	# Copy in our dependency files.
	# We want to leave the rest of the code base out for now,
	# so Docker can build a cache of this layer,
	# and only rebuild when the dependencies of our application changes.
	COPY --chown=composer ./app/composer.json ./

	# Install all the dependencies without running any installation scripts.
	# We skip scripts as the code base hasn't been copied in yet and script will likely fail,
	# as `php artisan` available yet.
	# This also helps us to cache previous runs and layers.
	# As long as comoser.json and composer.lock doesn't change the install will be cached.
	RUN composer install --no-dev --no-scripts --no-autoloader --prefer-dist

	# Copy in our actual source code so we can run the installation scripts we need
	# At this point all the PHP packages have been installed,
	# and all that is left to do, is to run any installation scripts which depends on the code base
	COPY --chown=composer ./app/ .

	# Now that the code base and packages are all available,
	# we can run the install again, and let it run any install scripts.
	RUN composer install --no-dev --prefer-dist

	SAVE ARTIFACT  /opt/apps/laravel-in-kubernetes /opt/apps/laravel-in-kubernetes


frontend:
	# For the frontend, we want to get all the Laravel files,
	# and run a production compile
	FROM node:14

	ARG version='0.1'
	ARG docker_registry='drayfocus/earthly-sample'
	ARG service='sample'
	
	# We need to copy in the Laravel files to make everything is available to our frontend compilation
	COPY +composer-base/opt/apps/laravel-in-kubernetes /opt/apps/laravel-in-kubernetes

	WORKDIR /opt/apps/laravel-in-kubernetes

	# We want to install all the NPM packages,
	# and compile the MIX bundle for production
	RUN npm install && npm run prod

	SAVE ARTIFACT  /opt/apps/laravel-in-kubernetes  /opt/apps/laravel-in-kubernetes


cli:
	# For running things like migrations, and queue jobs,
	# we need a CLI container.
	# It contains all the Composer packages,
	# and just the basic CLI "stuff" in order for us to run commands,
	# be that queues, migrations, tinker etc.
	FROM php:8.1-alpine

	WORKDIR /opt/apps/laravel-in-kubernetes

	# We need to install some requirements into our image,
	# used to compile our PHP extensions, as well as install all the extensions themselves.
	# You can see a list of required extensions for Laravel here: https://laravel.com/docs/8.x/deployment#server-requirements
	RUN apk add --virtual build-dependencies --no-cache ${PHPIZE_DEPS} openssl ca-certificates libxml2-dev oniguruma-dev && \
		docker-php-ext-install -j$(nproc) ${PHP_EXTS} && \
		pecl install ${PHP_PECL_EXTS} && \
		docker-php-ext-enable ${PHP_PECL_EXTS} && \
		# apk add --upgrade php8-tokenizer && \
		apk del build-dependencies


	# #  Install Imagick for PDF to Image coversion
	RUN wget https://raw.githubusercontent.com/mlocati/docker-php-extension-installer/master/install-php-extensions
	RUN mv install-php-extensions /usr/local/bin/
	RUN chmod uga+x /usr/local/bin/install-php-extensions && sync && \
    install-php-extensions imagick
	


	# Install ghostscript
	RUN wget https://github.com/luvvien/resources/raw/master/ghostscript-9.22-linux-x86_64.tar.gz\
    && tar -xzvf ghostscript-9.22-linux-x86_64.tar.gz \
    && cd ghostscript-9.22-linux-x86_64 \
    && cp gs-922-linux-x86_64 /usr/local/bin/gs \
    && cp gs-922-linux-x86_64 /usr/bin/gs \
    && rm ../ghostscript-9.22-linux-x86_64.tar.gz \
    && rm -rf ghostscript-9.22-linux-x86_64 


	# Setup GD extension
	RUN apk add --no-cache \
		freetype \
		libjpeg-turbo \
		libpng \
		freetype-dev \
		libjpeg-turbo-dev \
		libpng-dev \
		&& docker-php-ext-configure gd \
		--with-freetype=/usr/include/ \
		# --with-png=/usr/include/ \ # No longer necessary as of 7.4; https://github.com/docker-library/php/pull/910#issuecomment-559383597
		--with-jpeg=/usr/include/ \
		&& docker-php-ext-install -j$(nproc) gd \
		&& docker-php-ext-enable gd \
		&& apk del --no-cache \
		freetype-dev \
		libjpeg-turbo-dev \
		libpng-dev \
		&& rm -rf /tmp/*

	# Setup ffmpeg
	RUN apk add  --no-cache ffmpeg

	# Next we have to copy in our code base from our initial build which we installed in the previous stage
	COPY +composer-base/opt/apps/laravel-in-kubernetes /opt/apps/laravel-in-kubernetes
	# COPY +frontend/opt/apps/laravel-in-kubernetes/public /opt/apps/laravel-in-kubernetes/public

	# Overide php.ini
	COPY ./conf/custom-php.ini /usr/local/etc/php/php.ini

	SAVE ARTIFACT  /opt/apps/laravel-in-kubernetes /opt/apps/laravel-in-kubernetes


fpm-server:
	# We need a stage which contains FPM to actually run and process requests to our PHP application.
	FROM php:8.1-fpm-alpine

	ARG version='0.1'
	ARG docker_registry='drayfocus/earthly-sample'
	ARG service='sample'

	WORKDIR /opt/apps/laravel-in-kubernetes

	RUN apk add --virtual build-dependencies --no-cache ${PHPIZE_DEPS} openssl ca-certificates libxml2-dev oniguruma-dev && \
		docker-php-ext-install -j$(nproc) ${PHP_EXTS} && \
		pecl install ${PHP_PECL_EXTS} && \
		docker-php-ext-enable ${PHP_PECL_EXTS} && \
		# apk add --upgrade php8-tokenizer && \
		apk del build-dependencies


	# #  Install Imagick for PDF to Image coversion
	RUN wget https://raw.githubusercontent.com/mlocati/docker-php-extension-installer/master/install-php-extensions
	RUN mv install-php-extensions /usr/local/bin/
	RUN chmod uga+x /usr/local/bin/install-php-extensions && sync && \
    install-php-extensions imagick
	


	# Install ghostscript
	RUN wget https://github.com/luvvien/resources/raw/master/ghostscript-9.22-linux-x86_64.tar.gz\
    && tar -xzvf ghostscript-9.22-linux-x86_64.tar.gz \
    && cd ghostscript-9.22-linux-x86_64 \
    && cp gs-922-linux-x86_64 /usr/local/bin/gs \
    && cp gs-922-linux-x86_64 /usr/bin/gs \
    && rm ../ghostscript-9.22-linux-x86_64.tar.gz \
    && rm -rf ghostscript-9.22-linux-x86_64 

	
	# Setup GD extension
	RUN apk add --no-cache \
		freetype \
		libjpeg-turbo \
		libpng \
		freetype-dev \
		libjpeg-turbo-dev \
		libpng-dev \
		&& docker-php-ext-configure gd \
		--with-freetype=/usr/include/ \
		# --with-png=/usr/include/ \ # No longer necessary as of 7.4; https://github.com/docker-library/php/pull/910#issuecomment-559383597
		--with-jpeg=/usr/include/ \
		&& docker-php-ext-install -j$(nproc) gd \
		&& docker-php-ext-enable gd \
		&& apk del --no-cache \
		freetype-dev \
		libjpeg-turbo-dev \
		libpng-dev \
		&& rm -rf /tmp/*

	# Setup ffmpeg
	RUN apk add  --no-cache ffmpeg

	# We have to copy in our code base from our initial build which we installed in the previous stage
	COPY +composer-base/opt/apps/laravel-in-kubernetes /opt/apps/laravel-in-kubernetes
	# COPY +frontend/opt/apps/laravel-in-kubernetes/public /opt/apps/laravel-in-kubernetes/public

	RUN chown -R www-data:www-data /opt/apps/laravel-in-kubernetes /opt/apps/laravel-in-kubernetes/public

	# Overide php.ini
	COPY ./conf/custom-php.ini /usr/local/etc/php/php.ini

	# We want to cache the event, routes, and views so we don't try to write them when we are in Kubernetes.
	# Docker builds should be as immutable as possible, and this removes a lot of the writing of the live application.
	# RUN php artisan event:cache && \
	# 	php artisan view:cache

	# As FPM uses the www-data user when running our application,
	# we need to make sure that we also use that user when starting up,
	# so our user "owns" the application when running
	USER www-data

	SAVE IMAGE --push ${docker_registry}/${service}_fpm_server:v${version}


web-server:
	# We need an nginx container which can pass requests to our FPM container,
	# as well as serve any static content.
	FROM nginx:1.20-alpine

	ARG version='0.1'
	ARG docker_registry='drayfocus/earthly-sample'
	ARG service='sample'

	WORKDIR /opt/apps/laravel-in-kubernetes

	# We need to add our NGINX template to the container for startup,
	# and configuration.
	COPY ./conf/nginx.conf /etc/nginx/templates/default.conf.template

	# # Copy in ONLY the public directory of our project.
	# # This is where all the static assets will live, which nginx will serve for us.
	
	COPY +composer-base/opt/apps/laravel-in-kubernetes/public /opt/apps/laravel-in-kubernetes/public

	SAVE IMAGE --push ${docker_registry}/${service}_web_server:v${version}

cron:
	# We need a CRON container to the Laravel Scheduler.
	# We'll start with the CLI container as our base,
	# as we only need to override the CMD which the container starts with to point at cron

	ARG version='0.1'
	ARG docker_registry='drayfocus/earthly-sample'
	ARG service='sample'

	FROM +cli

	WORKDIR /opt/apps/laravel-in-kubernetes

	# We want to create a laravel.cron file with Laravel cron settings, which we can import into crontab,
	# and run crond as the primary command in the forground
	RUN touch laravel.cron && \
		echo "* * * * * cd /opt/apps/laravel-in-kubernetes && php artisan schedule:run" >> laravel.cron && \
		crontab laravel.cron

	CMD ["crond", "-l", "2", "-f"]

	SAVE IMAGE --push ${docker_registry}/${service}_cron:v${version}


queue-worker:
	# We need a CRON container to the Laravel Scheduler.
	# We'll start with the CLI container as our base,
	# as we only need to override the CMD which the container starts with to point at cron

	ARG version='0.1'
	ARG docker_registry='drayfocus/earthly-sample'
	ARG service='sample'

	FROM +cli

	WORKDIR /opt/apps/laravel-in-kubernetes


	CMD ["php", "artisan", "queue:work", "--queue=default", "--sleep=3", "--tries=3", "--max-time=5600"]

	SAVE IMAGE --push ${docker_registry}/${service}_queue_worker:v${version}


queue-worker-high:
	# We need a CRON container to the Laravel Scheduler.
	# We'll start with the CLI container as our base,
	# as we only need to override the CMD which the container starts with to point at cron

	ARG version='0.1'
	ARG docker_registry='drayfocus/earthly-sample'
	ARG service='sample'

	FROM +cli

	WORKDIR /opt/apps/laravel-in-kubernetes


	CMD ["php", "artisan", "queue:work", "--queue=high", "--sleep=3", "--tries=3", "--max-time=5600"]

	SAVE IMAGE --push ${docker_registry}/${service}_queue_worker_high:v${version}